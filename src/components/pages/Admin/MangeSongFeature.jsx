import { useState, useEffect } from "react";
import axios from "../../../configs/apiConfig";
import React from "react";
export default function ManageSongEmotion() {
  const [songs, setSongs] = useState([]);
  const [emotions, setEmotions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [search, setSearch] = useState("");
  const [openSongId, setOpenSongId] = useState(null); // b√†i ƒëang m·ªü frame
  const [songStates, setSongStates] = useState({}); // tr·∫°ng th√°i t·ª´ng b√†i

  // üü¢ L·∫•y danh s√°ch b√†i h√°t
  const fetchSongs = async () => {
    try {
      setLoading(true);
      const res = await axios.get("/songs/with-feature/all");
      // map ƒë·ªÉ ƒë·∫£m b·∫£o hasFeature lu√¥n t·ªìn t·∫°i
      setSongs(
        (res.data?.data || []).map((song) => ({
          ...song,
          hasFeature: song.hasFeature ? true : false,
        }))
      );
      setError(null);
    } catch (err) {
      console.error("Fetch error:", err);
      setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√†i h√°t");
    } finally {
      setLoading(false);
    }
  };

  // üü¢ L·∫•y danh s√°ch c·∫£m x√∫c
  const fetchEmotions = async () => {
    try {
      const res = await axios.get("/emotions");
      setEmotions(res.data?.data || []);
    } catch (err) {
      console.error("L·ªói khi t·∫£i c·∫£m x√∫c:", err);
    }
  };

  useEffect(() => {
    fetchSongs();
    fetchEmotions();
  }, []);

  // üü¢ Ph√¢n t√≠ch t·ª´ng b√†i
  const handleAnalyzeAndAssign = async (songId) => {
    const songState = songStates[songId];
    if (!songState?.file) return alert("Vui l√≤ng ch·ªçn file nh·∫°c!");
    if (!songState?.emotionId) return alert("Vui l√≤ng ch·ªçn c·∫£m x√∫c!");

    const formData = new FormData();
    formData.append("songId", songId);
    formData.append("emotionId", songState.emotionId);
    formData.append("file", songState.file);

    // B·∫≠t spinner ri√™ng b√†i n√†y
    setSongStates((prev) => ({
      ...prev,
      [songId]: { ...prev[songId], saving: true },
    }));

    try {
      await axios.post("/features/analyze", formData, {
        headers: { "Content-Type": "multipart/form-data" },
      });
      alert("‚úÖ Ph√¢n t√≠ch & g√°n c·∫£m x√∫c th√†nh c√¥ng!");

      // C·∫≠p nh·∫≠t hasFeature ƒë·ªÉ hi·ªÉn th·ªã c·ªôt "ƒê√£ ph√¢n t√≠ch"
      setSongs((prevSongs) =>
        prevSongs.map((s) =>
          s.songId === songId ? { ...s, hasFeature: true } : s
        )
      );

      // Reset tr·∫°ng th√°i songStates
      setSongStates((prev) => ({
        ...prev,
        [songId]: { file: null, emotionId: null, saving: false },
      }));

      setOpenSongId(null); // ƒë√≥ng frame
    } catch (err) {
      console.error("‚ùå L·ªói ph√¢n t√≠ch:", err);
      alert("Kh√¥ng th·ªÉ ph√¢n t√≠ch ho·∫∑c g√°n c·∫£m x√∫c!");
      setSongStates((prev) => ({
        ...prev,
        [songId]: { ...prev[songId], saving: false },
      }));
    }
  };

  // üü¢ L·ªçc b√†i h√°t
  const filteredSongs = songs.filter((s) =>
    (s?.title || "").toLowerCase().includes(search.toLowerCase())
  );

  const formatDate = (dateString) => {
    if (!dateString) return "‚Äî";
    try {
      const [year, month, day] = String(dateString).substring(0, 10).split("-");
      return `${day}/${month}/${year}`;
    } catch {
      return "‚Äî";
    }
  };

  return (
    <div className="p-8 relative">
      <h1 className="text-2xl font-bold text-gray-800 mb-6">
        Ph√¢n t√≠ch c·∫£m x√∫c b√†i h√°t
      </h1>

      {/* √î t√¨m ki·∫øm */}
      <div className="mb-4">
        <input
          type="text"
          placeholder="T√¨m ki·∫øm b√†i h√°t..."
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          className="px-4 py-2 border border-gray-300 rounded-xl w-full md:w-1/3 focus:outline-none focus:ring-2 focus:ring-black"
        />
      </div>

      {/* B·∫£ng d·ªØ li·ªáu */}
      <div className="bg-white shadow rounded-xl overflow-x-auto">
        <table className="min-w-full border border-gray-200">
          <thead className="bg-gray-100">
            <tr>
              <th className="px-4 py-3 text-center w-12">STT</th>
              <th className="px-6 py-3 text-left">T√™n b√†i h√°t</th>
              <th className="px-6 py-3 text-left">Ca sƒ©</th>
              <th className="px-6 py-3 text-left">Th·ªÉ lo·∫°i</th>
              <th className="px-6 py-3 text-center">Ng√†y ph√°t h√†nh</th>
              <th className="px-6 py-3 text-center">ƒê√£ ph√¢n t√≠ch</th>
              <th className="px-6 py-3 text-center">H√†nh ƒë·ªông</th>
            </tr>
          </thead>
          <tbody>
            {loading ? (
              <tr>
                <td colSpan="7" className="text-center py-4 text-gray-600">
                  ƒêang t·∫£i...
                </td>
              </tr>
            ) : error ? (
              <tr>
                <td colSpan="7" className="text-center py-4 text-red-500">
                  {error}
                </td>
              </tr>
            ) : filteredSongs.length === 0 ? (
              <tr>
                <td colSpan="7" className="text-center py-4 text-gray-600">
                  Kh√¥ng c√≥ d·ªØ li·ªáu
                </td>
              </tr>
            ) : (
              filteredSongs.map((song, index) => (
                <React.Fragment key={song.songId}>
                  <tr className="border-t hover:bg-gray-50 transition">
                    <td className="px-4 py-3 text-center">{index + 1}</td>
                    <td className="px-6 py-3">{song.title || "‚Äî"}</td>
                    <td className="px-6 py-3">{song.singerName || "‚Äî"}</td>
                    <td className="px-6 py-3">{song.genreName || "‚Äî"}</td>
                    <td className="px-6 py-3 text-center">
                      {formatDate(song.releaseDate)}
                    </td>
                    <td className="px-6 py-3 text-center">
                      {song.hasFeature ? "‚úÖ" : "‚Äî"}
                    </td>
                    <td className="px-6 py-3 text-center">
                      <button
                        onClick={() =>
                          setOpenSongId(
                            openSongId === song.songId ? null : song.songId
                          )
                        }
                        className="px-4 py-2 bg-blue-500 text-white rounded-xl hover:bg-blue-600"
                      >
                        Ph√¢n t√≠ch
                      </button>
                      {songStates[song.songId]?.saving && (
                        <div className="inline-block ml-2 w-4 h-4 border-2 border-t-blue-500 border-gray-300 rounded-full animate-spin"></div>
                      )}
                    </td>
                  </tr>

                  {/* Frame ch·ªçn file + c·∫£m x√∫c */}
                  {openSongId === song.songId && (
                    <tr className="bg-gray-50">
                      <td colSpan="7" className="px-6 py-4">
                        <div className="flex flex-col md:flex-row items-start md:items-center gap-4">
                          <input
                            type="file"
                            accept=".mp3,.wav,.flac"
                            onChange={(e) =>
                              setSongStates((prev) => ({
                                ...prev,
                                [song.songId]: {
                                  ...prev[song.songId],
                                  file: e.target.files[0],
                                },
                              }))
                            }
                            className="px-3 py-2 border rounded-lg w-full md:w-1/3"
                          />
                          <select
                            value={songStates[song.songId]?.emotionId || ""}
                            onChange={(e) =>
                              setSongStates((prev) => ({
                                ...prev,
                                [song.songId]: {
                                  ...prev[song.songId],
                                  emotionId: e.target.value,
                                },
                              }))
                            }
                            className="px-3 py-2 border rounded-lg w-full md:w-1/4"
                          >
                            <option value="">Ch·ªçn c·∫£m x√∫c</option>
                            {emotions.map((e) => (
                              <option key={e.emotionId} value={e.emotionId}>
                                {e.name}
                              </option>
                            ))}
                          </select>
                          <button
                            onClick={() => handleAnalyzeAndAssign(song.songId)}
                            disabled={songStates[song.songId]?.saving}
                            className="px-4 py-2 bg-green-500 text-white rounded-xl hover:bg-green-600 flex items-center gap-2"
                          >
                            Ph√¢n t√≠ch
                            {songStates[song.songId]?.saving && (
                              <div className="w-4 h-4 border-2 border-t-white border-gray-200 rounded-full animate-spin"></div>
                            )}
                          </button>
                        </div>
                      </td>
                    </tr>
                  )}
                </React.Fragment>
              ))
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}
